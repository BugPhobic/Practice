/**
 * This class contains a template for the player and the enemy characters
 * that can be created in the game.
 * Using inheritance would have greatly improved the code in this class by
 * reducing redundancies. I could have used different constructors
 * but I lacked the time to make the necessary changes, and the resulting object
 * would have still have redundant attributes
 *
 * @author Sam Grace Saji
 * @version 3.0
 * @since 2018-06-10
 */
//I could have made subclasses for each character type
public class Character {
    private final int MAX_DMG;
    private final int MAX_HP;
    private final int MAX_REGEN;
    private final int MAX_REST_REGEN;
    private final int MIN_DMG;
    private final int MIN_REGEN;
    private final int MIN_REST_REGEN;
    private final String CHARACTER_ID;
    private final String CHARACTER_TYPE;
    private int characterLocation;
    private int hp;

    //Constructors

    /**
     * Constructor (Given no parameters)
     */
    public Character() {
        CHARACTER_TYPE = "null";
        CHARACTER_ID = "null";
        MAX_HP = -1;
        MAX_DMG = -1;
        MIN_DMG = -1;
        characterLocation = 0;
        hp = MAX_HP;
        MAX_REGEN = -1;
        MIN_REGEN = -1;
        MAX_REST_REGEN = -1;
        MIN_REST_REGEN = -1;
    }

    /**
     * Constructor (Given all parameters)
     * Creates a character and places it in a room
     *
     * @param identification    A unique ID
     * @param type              Type of character
     * @param hitpoints         HP of the character
     * @param maxDamage         Maximum damage that can be dealt by character
     * @param minDamage         Minimum damage that can be dealt by character
     * @param maxHpRegen        Maximum HP that can be regenerated by character per turn
     * @param minHpRegen        Minimum HP that can be regenerated by character per turn
     * @param maxHpRestingRegen Maximum HP that be regenerated while resting per turn
     * @param minHpRestingRegen Minimum HP that can be regenerated while resting per turn
     * @param roomNum           The roomNum of the room in which the character is placed
     */
    public Character(String identification, String type, int hitpoints, int maxDamage, int minDamage, int maxHpRegen, int minHpRegen, int maxHpRestingRegen, int minHpRestingRegen, int roomNum) {
        CHARACTER_ID = identification;
        CHARACTER_TYPE = type;
        MAX_HP = hitpoints;
        MAX_DMG = maxDamage;
        MIN_DMG = minDamage;
        MAX_REGEN = maxHpRegen;
        MIN_REGEN = minHpRegen;
        MAX_REST_REGEN = maxHpRestingRegen;
        MIN_REST_REGEN = minHpRestingRegen;
        characterLocation = roomNum;
        hp = MAX_HP;
    }

    /**
     * Constructor (Given object)
     *
     * @param object An instance of the Character class
     */
    public Character(Character object) {
        this.CHARACTER_ID = object.CHARACTER_ID;
        this.CHARACTER_TYPE = object.CHARACTER_TYPE;
        this.MAX_HP = object.MAX_HP;
        this.MAX_DMG = object.MAX_DMG;
        this.MIN_DMG = object.MIN_DMG;
        this.MAX_REGEN = object.MAX_REGEN;
        this.MIN_REGEN = object.MIN_REGEN;
        this.MAX_REST_REGEN = object.MAX_REST_REGEN;
        this.MIN_REST_REGEN = object.MIN_REST_REGEN;
        this.characterLocation = object.characterLocation;
        this.hp = this.MAX_HP;
    }

    //Mutators

    /**
     * Defines the location of the character
     *
     * @param roomNum The number of the room in which the character is present
     */
    public void setCharacterLocation(int roomNum) {
        characterLocation = roomNum;
    }

    /**
     * Defines the HP of the character
     *
     * @param num HP of the character
     */
    public void setHp(int num) {
        hp = num;
    }

    //Accessors

    /**
     * Returns the unique ID of the character
     *
     * @return Character ID
     */
    public String getCharacterId() {
        return CHARACTER_ID;
    }

    /**
     * Returns the location of the character
     *
     * @return The number of the room in which the character is present
     */
    public int getCharacterLocation() {
        return characterLocation;
    }

    /**
     * Returns the maximum damage that can be dealt by the character
     *
     * @return The maximum damage that can be dealt by the character
     */
    public int getCharacterMaxDmg() {
        return MAX_DMG;
    }

    /**
     * Returns the minimum damage that can be dealt by the character
     *
     * @return The minimum damage that can be dealt by the character
     */
    public int getCharacterMinDmg() {
        return MIN_DMG;
    }

    /**
     * Returns the character's type
     *
     * @return The type that the character is
     */
    public String getCharacterType() {
        return CHARACTER_TYPE;
    }

    /**
     * Returns the character's HP
     *
     * @return The current HP of the character
     */
    public int getHp() {
        return hp;
    }

    /**
     * Returns the character's maximum HP
     *
     * @return HP at full health
     */
    public int getMaxHp() {
        return MAX_HP;
    }

    /**
     * Returns the maximum HP that can be regenerated in a turn
     *
     * @return The maximum HP that can be regenerated in a turn
     */
    public int getMaxRegen() {
        return MAX_REGEN;
    }

    /**
     * Returns the maximum HP that can be regenerated in a turn while resting
     *
     * @return The maximum HP that can be regenerated in a turn while resting
     */
    public int getMaxRestingRegen() {
        return MAX_REST_REGEN;
    }

    /**
     * Returns the minimum HP that can be regenerated in a turn
     *
     * @return The minimum HP that can be regenerated in a turn
     */
    public int getMinRegen() {
        return MIN_REGEN;
    }

    /**
     * Returns the minimum HP that can be regenerated in a turn while resting
     *
     * @return The minimum HP that can be regenerated in a turn while resting
     */
    public int getMinRestingRegen() {
        return MIN_REST_REGEN;
    }
}